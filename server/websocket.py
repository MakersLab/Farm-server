#!/usr/bin/env python3.6

'''
Service for websocket server
Sends to client printerState generated by printerState.py service
'''

import asyncio
import websockets
import logging
import time
import json

from lib.utils import loadFromFile, loadConfig, loadJsonObject

CONFIG = loadConfig('config/config.yml')
UPDATE_INTERVAL = CONFIG['websocket']['state-update-interval']

logger = logging.getLogger('websockets')
logger.setLevel(logging.INFO)
logger.addHandler(logging.StreamHandler())

updateTime = time.time()
connected = set()

distributedMessage = '...'
printerStateFileName = 'data/printer-state.json'

def shouldUpdateMessage():
    '''
    Checks if it is time to update printers state dictionary
    Returns:
        bool: Returns true if its time to send next message
    '''
    global updateTime
    if(updateTime <= time.time()):
        updateTime = time.time() + UPDATE_INTERVAL/1000
        return True
    else:
        return False

async def consumer(message):
    pass

async def producer():
    '''
    Handles getting printer state from file
    Returns:
        str: JSON serialized printer state object
        If specified interval has passed, loads in new data into the dict
    '''
    #TODO needs review/rewrite, split into smaller parts
    global distributedMessage
    if(shouldUpdateMessage()):
        try:
            distributedMessage = loadJsonObject(printerStateFileName)
        except Exception as e:
            time.sleep(1)
            distributedMessage = loadJsonObject(printerStateFileName)
    await asyncio.sleep(UPDATE_INTERVAL/1000)
    return json.dumps({
        'type':'printer-state',
        'data': distributedMessage['printers'],
        'timestamp': distributedMessage['timestamp'],
    })

async def consumer_handler(websocket):
    '''
    Handles incoming data from client
    Currently empty
    Args:
        websocket: websocket connection
    '''
    while True:
        message = await websocket.recv()
        await consumer(message)

async def producer_handler(websocket):
    '''
    Sends data to client
    Args:
        websocket: websocket connection
    '''
    while True:
        message = await producer()
        await websocket.send(message)

async def handler(websocket, path):
    '''
    Handles incoming connection
    Creates task for sending and receiving data
    Args:
        websocket: websocket connection
        path: unknown argument
    '''
    global connected
    print('{} new connection from {}'.format(time.time(),websocket.remote_address[0]))
    connected.add(websocket)
    consumer_task = asyncio.ensure_future(consumer_handler(websocket))
    producer_task = asyncio.ensure_future(producer_handler(websocket))
    done, pending = await asyncio.wait(
        [consumer_task, producer_task],
        return_when=asyncio.ALL_COMPLETED,
    )

    for task in pending:
        task.cancel()

def main():
    '''
    Starts websocket server
    Creates asyncio event loop
    '''
    start_server = websockets.serve(handler, '0.0.0.0', CONFIG['websocket']['port'])
    asyncio.get_event_loop().run_until_complete(start_server)
    asyncio.get_event_loop().run_forever()

if __name__ == '__main__':
    main()